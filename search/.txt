
1、静态查找表

    (a)顺序表查找

        从头、从尾开始逐个遍历

    (b)有序表查找(以下三种方法的区别是分隔点的选择不同)

        二分查找
        插值查找
        斐波那契查找

    (c)线性索引查找

        稠密索引
        分块索引
        倒排索引


2、动态查找表

    (a)二叉排序树

        定义: 一种二叉树，且在对其进行中序遍历时，可以得到一个有序的序列的二叉树
        目的: 既可以使得插入和删除效果不错，又可以比较高效率地实现查找
        性质:
            (i)若它的左子树不为空，则左子树上所有结点的值均小于它的根结点的值
            (i)若它的右子树不为空，则右子树上所有结点的值均大于它的根结点的值
            (i)它的左、右子树也分别为二叉排序树

    (b)平衡二叉树

        定义: 一种二叉排序树，其中每一个结点的左子树和右子树的高度差至多等于 1。
        目的: 高效的查找
        性质:
            (i)平衡二叉树是一种高度平衡的二叉排序树
            (i)二叉树上各结点的左子树深度减去右子树深度的值(即平衡因子)，只可能是 -1，0 和 1。
        其它:
            距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，称为最小不平衡子树。
            最小不平衡子树，是构建平衡二叉树过程中需要不断调整的基本对象。

    (c)多路查找树

        定义: 每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素
        目的: 容量大
        分类: 2-3树、2-3-4树、B树和B+树
        2-3树：其中的每一个结点都具有两个孩子（称为2结点）或三个孩子（称为3结点），所有叶子都在同一层次上
            2结点:
                (a)包含一个元素和两个孩子或没有孩子
                (b)左子树包含的元素小于该元素，右子树包含的元素大于该元素
            3结点:
                (a)包含一大一小两个元素和三个孩子或没有孩子
                (b)左子树含有较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素
        2-3-4树: 2-3树的概念扩展，然后包括了4结点的使用。一个4结点包括小中大三个元素和四个孩子或没有孩子
        B树: 一种平衡的多路查找树，2-3树和2-3-4树都是B树的特例。结点最大的孩子数目称为B树的阶。
            B树天生是为内外存的数据交换准备的
            一个 m 阶的B树具有如下属性:
                (1)如果根结点不是叶结点，则其至少有两棵子树
                (2)所有叶子结点都位于都一层次
                (3)所有分支结点包含下列信息数据 (n,A0,K1,A1,K2,...Kn,An),n为元素(或称关键字)个数，
                   Ki为关键字，且 K(i)<K(i+1);
                   Ai为指向子树根结点的指针，且 Ai所指子树中所有结点的关键字均小于 K(i+1),
                   An所指子树中所有结点的关键字均大于 Kn
        B+树: 应文件系统所需而出的一种 B 树的变形树，B+ 树的结构特别适合带有范围的查找
             一棵 m 阶的 B+ 树和 m 阶的 B 树的差异在于:
                 (1)在有 n 棵子树的结点中，包含有 n 个关键字
                 (2)所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的
                    大小自小而大顺序链接
                 (3)所有分支结点可以看成索引，结点中仅含有其子树中的最大或最小关键字


    (d)散列表

        散列技术是记录的存储位置和它的关键字之间建立一个确定的对应关系 f，使得每个关键字 key 对应一个存储位置 f(key)
        采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表
        关键字对应的记录存储位置我们称为散列地址
        散列技术既是一种存储方法，也是一种查找方法
        散列技术最适合的求解问题是查找与给定值相等的记录
        散列技术的短板: 1)范围查找；2)存在冲突
        散列函数的构造方法：
            (1)直接定址法: f(key) = a x key + b;        //适合查找表较小且连续的情况
            (2)数字分析法: 对关键字进行数字抽取 + 数字变换   //比较适合处理关键字位数比较大的情况
            (3)平方取中法: 算关键字平方，抽取结果中的中间数位 //比较适合于不知道关键字的分布，而位数又不是很大的情况
            (4)折叠法: 将关键字从左到右分割成位数相等的几部分(最后一部分可以短些)，求和，取后几位作散列地址
            (5)除留余数法: f(key) = key mod p (p<=m)    //散列表长为 m，通常 p 小于或等于表长的最小质数或
                                                      //不包含小于 20 质因数的合数
            (6)随机数法: f(key) = random(key)          //当关键字的长度不等时，适合采用这种方法

        选择不同散列函数时，考虑因素:
            (1)计算散列地址所需的时间
            (2)关键字的长度
            (3)散列表的大小
            (4)关键字的分布情况
            (5)记录查找的频率。

        处理散列冲突的方法:
            (1)开放定址法: 
                指一旦发生冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列表地址总能找到，并将记录存入。
                线性探测法: fi(key) = (f(key) + di) MODE m (di=1,2,3,...,m-1)
                二次探测法: fi(key) = (f(key) + di) MODE m (di=1,-1,4,-4,...,qxq,-qxq, q<m/2)
                随机探测法: fi(key) = (f(key) + di) MODE m (di是一个随机数列)
            (2)再散列函数法
                fi(key) = RHi(key) (i=1,2,3,...,k)
                事先准备多个散列函数（见散列函数的构造方法），每当发生冲突时，就换一个散列函数计算
            (3)链地址法
                将所有关键字为同义词的记录存储在一个单链表中，在散列表中只存储所有同义词子表的头指针
            (4)公共溢出区法
                基本表: 不包含冲突的散列表，冲突的关键字存放在溢出表。使用散列查找
                溢出表: 顺序存储冲突关键字的表。使用顺序查找



